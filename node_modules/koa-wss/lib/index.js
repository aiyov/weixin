'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var url = require('url');
var https = require('https');
var compose = require('koa-compose');
var co = require('co');
var ws = require('ws');
var debug = require('debug')('koa:wss');

var WebSocketServer = ws.Server;

function KoaWebSocketServer(app) {
  this.app = app;
  this.middleware = [];
}

KoaWebSocketServer.prototype.listen = function (options) {
  this.server = new WebSocketServer(options);
  this.server.on('connection', this.onConnection.bind(this));
};

KoaWebSocketServer.prototype.onConnection = function (socket) {
  debug('Connection received');
  socket.on('error', function (err) {
    debug('Error occurred:', err);
  });
  var fn = co.wrap(compose(this.middleware));

  var context = this.app.createContext(socket.upgradeReq);
  context.websocket = socket;
  context.path = url.parse(socket.upgradeReq.url).pathname;

  fn(context).catch(function (err) {
    debug(err);
  });
};

KoaWebSocketServer.prototype.use = function (fn) {
  this.middleware.push(fn);
  return this;
};

module.exports = function (koaApp, wsOptions, httpsOptions) {
  // the Koa listen function is syntactic sugar for
  // http.createServer(app.callback()).listen(...)
  // here we overwrite for HTTPS if httpsOptions are supplied
  var app = koaApp;
  var oldListen = app.listen;
  app.listen = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    debug('Attaching server...');
    if ((typeof httpsOptions === 'undefined' ? 'undefined' : _typeof(httpsOptions)) === 'object') {
      var httpsServer = https.createServer(httpsOptions, app.callback());
      app.server = httpsServer.listen.apply(httpsServer, args);
    } else {
      app.server = oldListen.apply(app, args);
    }
    var options = Object.assign({}, wsOptions, { server: app.server });
    app.ws.listen(options);
    return app.server;
  };
  app.ws = new KoaWebSocketServer(app);
  return app;
};